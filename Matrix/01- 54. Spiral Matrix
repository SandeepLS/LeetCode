Given an m x n matrix, return all elements of the matrix in spiral order.
/**
 * @param {number[][]} matrix
 * @return {number[]}
 */
var spiralOrder = function(matrix) {
    let top = 0;
    let left = 0;
    let right = matrix[0].length - 1;
    let bottom = matrix.length - 1;
    let dir = 0;
    let arr = [];

    while (top <= bottom && left <= right) {
        if (dir === 0) { // left to right
            for (let i = left; i <= right; i++) {
                arr.push(matrix[top][i]);
            }
            top += 1;
        } else if (dir === 1) { // top to bottom
            for (let i = top; i <= bottom; i++) {
                arr.push(matrix[i][right]);
            }
            right -= 1;
        } else if (dir === 2) { // right to left
            for (let i = right; i >= left; i--) {
                arr.push(matrix[bottom][i]);
            }
            bottom -= 1;
        } else if (dir === 3) { // bottom to top
            for (let i = bottom; i >= top; i--) {
                arr.push(matrix[i][left]);
            }
            left += 1;
        }
        dir = (dir + 1) % 4;
    }

    return arr;
};

// Example usage:
console.log(spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]])); // Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]
console.log(spiralOrder([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])); // Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
----------------------------------------------------------------------------------------------------------------------------
Dir:- in which direction, is need to print next.
coloum:- Used for Boundary purpose, It is showing, wt we have printed & wt we need print.
